name: ci

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  # pull_request:
  #   branches:
  #     - 'main'

jobs:

  docker:
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout Repo
      uses: actions/checkout@v2
    
    - name: Get Version
      id: get_version
      run: echo ::set-output name=version::"${{ github.event.release.tag_name }}"
      #run: echo ::set-output name=VERSION::"git describe --tags $(git rev-list --tags --max-count=1)"
    
    - name: Image Digest
      run: echo ${{ steps.get_version.outputs.VERSION }}; echo ${GITHUB_REF/refs\/tags\//}

    # - name: Setup QEMU
    #   uses: docker/setup-qemu-action@v1

    # - name: Setup Docker Buildx
    #   id: buildx
    #   uses: docker/setup-buildx-action@v1

    # - name: Login to Docker Hub
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    # - name: Login to GHCR
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v1
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_owner }}
    #     password: ${{ secrets.GHCR_TOKEN }}

    # - name: Cache Docker Layers
    #   uses: actions/cache@v2
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-buildx-${{ github.sha }}
    #     restore-keys: |
    #       ${{ runner.os }}-buildx-

    # - name: Build and Push
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: ./
    #     file: ./Dockerfile
    #     builder: ${{ steps.buildx.outputs.name }}
    #     push: ${{ github.event_name != 'pull_request' }}
    #     tags: |
    #       digitalmine/docker-mssql:latest
    #       ghcr.io/${{ github.repository_owner }}/docker-mssql:latest 
    #     cache-from: type=local,src=/tmp/.buildx-cache
    #     cache-to: type=local,dest=/tmp/.buildx-cache

    # - name: Image Digest
    #   run: echo ${{ steps.docker_build.outputs.digest }}; echo ${{ steps.get_version.outputs.VERSION }}
